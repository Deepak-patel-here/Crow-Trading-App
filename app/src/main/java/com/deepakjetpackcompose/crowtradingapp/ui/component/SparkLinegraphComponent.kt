package com.deepakjetpackcompose.crowtradingapp.ui.component

import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp

@Composable
fun CryptoMiniGraph(
    data: List<Double>,
    lineColor: Color = Color(0xFF00FF9D),
    modifier: Modifier = Modifier
) {
    if (data.size < 2) return

    val points = data.map { it.toFloat() }

    Canvas(modifier = modifier) {
        val spacing = size.width / (points.size - 1)
        val maxValue = points.maxOrNull() ?: 1f
        val minValue = points.minOrNull() ?: 0f
        val height = size.height

        val normalized = points.map {
            val norm = (it - minValue) / (maxValue - minValue)
            height - norm * height
        }

        val path = Path().apply {
            moveTo(0f, normalized.first())
            for (i in 1 until normalized.size) {
                val x1 = (i - 1) * spacing
                val x2 = i * spacing
                val y1 = normalized[i - 1]
                val y2 = normalized[i]
                val midX = (x1 + x2) / 2
                cubicTo(midX, y1, midX, y2, x2, y2)
            }
        }

        val fillPath = Path().apply {
            addPath(path)
            lineTo(size.width, size.height)
            lineTo(0f, size.height)
            close()
        }

        drawPath(
            path = fillPath,
            brush = Brush.verticalGradient(
                colors = listOf(lineColor.copy(alpha = 0.25f), Color.Transparent)
            )
        )

        drawPath(
            path = path,
            color = lineColor,
            style = Stroke(width = 3f)
        )
    }
}

@Preview(showBackground = true)
@Composable
private fun Test() {
    val data=listOf<Double>(2967.511256690298,
        2937.877205699426,
        2936.477207543277,
        2932.518055493346,
        2912.956320971995,
        2926.8225229271793,
        2940.9948540256487,
        2940.9536184309977,
        2940.3660994311117,
        2920.246622220888,
        2938.7392994791862,
        2936.9296889773636,
        2942.794234990203,
        2945.879962409454,
        2950.9344424906485,
        2953.868563985719,
        2956.4619333938317,
        2958.423116481006,
        2951.994992892299,
        2960.8953631985696,
        2963.547340465387,
        2953.9141264221453,
        2948.136398510044,
        2948.6162560664065,
        2963.954728377804,
        2988.035839141069,
        2989.2260621356572,
        2987.5394823508236,
        2992.7430185942967,
        2981.747356687539,
        2994.703275172786,
        2995.8968422946973,
        2995.3920761313466,
        2991.873726842008,
        2968.3198875670673,
        2963.9618334341867,
        2973.6756203455147,
        2980.8019804036694,
        2973.8637102310586,
        3001.3197408258943,
        3039.863794610569,
        3052.8065793650694,
        3036.0981605901643,
        3025.0570838009435,
        3044.102569407557,
        3038.2648070271366,
        3049.050054992461,
        3066.81432262693,
        3059.6789854647313,
        3044.372080240383,
        3061.145812461314,
        3029.2485460867424,
        3014.7059339644234,
        3024.8362692271517,
        3008.215426264479,
        2989.3811068131163,
        2998.326839627501,
        3008.2614033854443,
        3012.3294497545235,
        3015.196569922927,
        3013.0693411322845,
        2995.688910647719,
        2989.954852785821,
        2975.464105378093,
        2949.4029171095617,
        2969.3332716632526,
        2970.2916255235978,
        2981.4797220076402,
        2979.628129926121,
        2974.418263123222,
        2973.3969336806354,
        2972.814100298782,
        2975.543264171373,
        3002.148733210267,
        3055.9291540438444,
        2983.832181818428,
        3039.4108635333714,
        3054.5331577335796,
        3093.0902698069026,
        3068.87070491914,
        3042.774329356415,
        3044.389673340626,
        3079.0467026405117,
        3090.9952283639072,
        3136.7886392559913,
        3142.315837598621,
        3139.450431828673,
        3112.9395093300895,
        3114.3938487544838,
        3122.990651692824,
        3145.047321848014,
        3158.7794109332544,
        3166.218655722704,
        3163.966516213337,
        3159.536417151663,
        3149.297903896893,
        3151.769083974921,
        3166.5411950682656,
        3193.873223502803,
        3255.6406751432523,
        3234.86656200042,
        3283.4245989455135,
        3314.751164795025,
        3338.1333157136314,
        3372.682774679363,
        3385.3921666620363,
        3374.0019521771137,
        3362.4616017826957,
        3369.9529794891137,
        3385.2262490130147,
        3338.0399272864834,
        3348.6303683953074,
        3329.7548042768044,
        3349.8108339046435,
        3372.797417927576,
        3431.4038026024036,
        3448.458062605559,
        3440.0168050045754,
        3471.659221627896,
        3460.554446045068,
        3437.2907345401304,
        3430.9840429736505,
        3403.3626980413583,
        3428.419380803104,
        3421.3170077169766,
        3396.844044286902,
        3417.191261254138,
        3430.279106763783,
        3421.200945416784,
        3414.882164509822,
        3470.5515088184266,
        3470.2093245919696,
        3481.8828152374017,
        3536.0025048256603,
        3614.816420284785,
        3607.4302549826557,
        3598.8487684243573,
        3616.1099310522113,
        3669.847483106436,
        3658.6489640393397,
        3620.3033808957093,
        3604.94616643797,
        3619.9955238149937,
        3616.991634026319,
        3615.845134749492,
        3624.472182019736,
        3645.9355796031864,
        3590.6686087882513,
        3563.6622057512823,
        3579.1571177732767,
        3596.5562693882885,
        3583.6177879775405,
        3555.97779285985,
        3520.4130982184174,
        3558.374326333749,
        3542.0150145168823,
        3548.4201844098584,
        3535.4273406044167,
        3549.8495162111476,
        3572.973451756588,
        3591.0958618101226,
        3590.6520256731947,
        3587.6931941692237,
        3575.467657152083,
        3575.1178301171603,
        3557.010030789125,
        3561.2285736407193,
        3561.5968285273325)
    CryptoMiniGraph(data = data, lineColor = Color.Green, modifier = Modifier.fillMaxWidth().height(65.dp))

}
